// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createImage = `-- name: CreateImage :one
INSERT INTO
  image (
    link,
    title,
    date,
    source,
    author,
    src
  )
VALUES
  (?, ?, ?, ?, ?, ?) RETURNING id
`

type CreateImageParams struct {
	Link   sql.NullString
	Title  sql.NullString
	Date   sql.NullString
	Source sql.NullString
	Author sql.NullString
	Src    sql.NullString
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createImage,
		arg.Link,
		arg.Title,
		arg.Date,
		arg.Source,
		arg.Author,
		arg.Src,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createImageLicense = `-- name: CreateImageLicense :exec
INSERT INTO image_license (
  image_id, license_id
) VALUES (?, ?)
`

type CreateImageLicenseParams struct {
	ImageID   sql.NullInt64
	LicenseID sql.NullInt64
}

func (q *Queries) CreateImageLicense(ctx context.Context, arg CreateImageLicenseParams) error {
	_, err := q.db.ExecContext(ctx, createImageLicense, arg.ImageID, arg.LicenseID)
	return err
}

const createIntlStatus = `-- name: CreateIntlStatus :one
INSERT INTO intl_status (
  name, link
) VALUES (?,?) RETURNING id
`

type CreateIntlStatusParams struct {
	Name sql.NullString
	Link sql.NullString
}

func (q *Queries) CreateIntlStatus(ctx context.Context, arg CreateIntlStatusParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createIntlStatus, arg.Name, arg.Link)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createLicense = `-- name: CreateLicense :one
INSERT INTO license (
  type, name, link
) VALUES (?,?,?) RETURNING id
`

type CreateLicenseParams struct {
	Type sql.NullString
	Name sql.NullString
	Link sql.NullString
}

func (q *Queries) CreateLicense(ctx context.Context, arg CreateLicenseParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createLicense, arg.Type, arg.Name, arg.Link)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createNationalPark = `-- name: CreateNationalPark :one
INSERT INTO
  national_park (
    name,
    description,
    region,
    link,
    year,
    total_area_in_km,
    total_area_in_miles,
    water_percentages,
    coordinate_latitude,
    coordinate_longitude,
    map_url,
    location,
    established,
    visitors,
    management
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id
`

type CreateNationalParkParams struct {
	Name                sql.NullString
	Description         sql.NullString
	Region              sql.NullString
	Link                sql.NullString
	Year                sql.NullInt64
	TotalAreaInKm       sql.NullInt64
	TotalAreaInMiles    sql.NullInt64
	WaterPercentages    sql.NullString
	CoordinateLatitude  sql.NullFloat64
	CoordinateLongitude sql.NullFloat64
	MapUrl              sql.NullString
	Location            sql.NullString
	Established         sql.NullInt64
	Visitors            sql.NullString
	Management          sql.NullString
}

func (q *Queries) CreateNationalPark(ctx context.Context, arg CreateNationalParkParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNationalPark,
		arg.Name,
		arg.Description,
		arg.Region,
		arg.Link,
		arg.Year,
		arg.TotalAreaInKm,
		arg.TotalAreaInMiles,
		arg.WaterPercentages,
		arg.CoordinateLatitude,
		arg.CoordinateLongitude,
		arg.MapUrl,
		arg.Location,
		arg.Established,
		arg.Visitors,
		arg.Management,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createNationalParkImage = `-- name: CreateNationalParkImage :exec
INSERT INTO national_park_image (
  national_park_id, image_id
) VALUES (?, ?)
`

type CreateNationalParkImageParams struct {
	NationalParkID sql.NullInt64
	ImageID        sql.NullInt64
}

func (q *Queries) CreateNationalParkImage(ctx context.Context, arg CreateNationalParkImageParams) error {
	_, err := q.db.ExecContext(ctx, createNationalParkImage, arg.NationalParkID, arg.ImageID)
	return err
}

const createNationalParkIntlStatus = `-- name: CreateNationalParkIntlStatus :exec
INSERT INTO national_park_intl_status (
  national_park_id, intl_status_id
) VALUES (?, ?)
`

type CreateNationalParkIntlStatusParams struct {
	NationalParkID sql.NullInt64
	IntlStatusID   sql.NullInt64
}

func (q *Queries) CreateNationalParkIntlStatus(ctx context.Context, arg CreateNationalParkIntlStatusParams) error {
	_, err := q.db.ExecContext(ctx, createNationalParkIntlStatus, arg.NationalParkID, arg.IntlStatusID)
	return err
}

const getIntlStatus = `-- name: GetIntlStatus :one
SELECT id, name, link FROM intl_status WHERE id = ? LIMIT 1
`

func (q *Queries) GetIntlStatus(ctx context.Context, id int64) (IntlStatus, error) {
	row := q.db.QueryRowContext(ctx, getIntlStatus, id)
	var i IntlStatus
	err := row.Scan(&i.ID, &i.Name, &i.Link)
	return i, err
}

const getIntlStatusByName = `-- name: GetIntlStatusByName :one
SELECT id, name, link FROM intl_status WHERE name = ? LIMIT 1
`

func (q *Queries) GetIntlStatusByName(ctx context.Context, name sql.NullString) (IntlStatus, error) {
	row := q.db.QueryRowContext(ctx, getIntlStatusByName, name)
	var i IntlStatus
	err := row.Scan(&i.ID, &i.Name, &i.Link)
	return i, err
}

const getLicense = `-- name: GetLicense :one
SELECT id, type, name, link FROM license WHERE id = ? LIMIT 1
`

func (q *Queries) GetLicense(ctx context.Context, id int64) (License, error) {
	row := q.db.QueryRowContext(ctx, getLicense, id)
	var i License
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Link,
	)
	return i, err
}

const getLicenseByName = `-- name: GetLicenseByName :one
SELECT id, type, name, link FROM license WHERE name = ? LIMIT 1
`

func (q *Queries) GetLicenseByName(ctx context.Context, name sql.NullString) (License, error) {
	row := q.db.QueryRowContext(ctx, getLicenseByName, name)
	var i License
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Link,
	)
	return i, err
}

const getNationalPark = `-- name: GetNationalPark :one
SELECT
  np.id AS id,
  np.name AS name,
  np.description AS description,
  np.region AS region,
  JSON_GROUP_ARRAY(
    JSON_OBJECT(
      'id',
      img.id,
      'link',
      img.link,
      'title',
      img.title,
      'date',
      img.date,
      'source',
      img.source,
      'author',
      img.author,
      'src',
      img.src
    )
  ) AS images,
  JSON_GROUP_ARRAY(
    JSON_OBJECT(
      'id',
      intl.id,
      'name',
      intl.name,
      'link',
      intl.link
    )
  ) as intl_statuses,
  JSON_OBJECT(
    'km',
    np.total_area_in_km,
    'miles',
    np.total_area_in_miles
  ) as total_area,
  JSON_OBJECT(
    'lat',
    np.coordinate_latitude,
    'long',
    np.coordinate_longitude
  ) as coordinate,
  np.water_percentages AS water_percentages,
  np.map_url AS map_url,
  np.location AS location,
  np.established AS established_year,
  np.visitors AS visitors,
  np.management AS management
FROM
  national_park np
  LEFT JOIN national_park_image npi ON np.id = npi.national_park_id
  LEFT JOIN image img ON npi.image_id = img.id
  LEFT JOIN image_license il ON img.id = il.image_id
  LEFT JOIN license lic ON il.license_id = lic.id
  LEFT JOIN national_park_intl_status nps ON np.id = nps.national_park_id
  LEFT JOIN intl_status intl ON nps.intl_status_id = intl.id
WHERE
  np.name = ?
GROUP BY
  np.id
`

type GetNationalParkRow struct {
	ID               int64
	Name             sql.NullString
	Description      sql.NullString
	Region           sql.NullString
	Images           interface{}
	IntlStatuses     interface{}
	TotalArea        interface{}
	Coordinate       interface{}
	WaterPercentages sql.NullString
	MapUrl           sql.NullString
	Location         sql.NullString
	EstablishedYear  sql.NullInt64
	Visitors         sql.NullString
	Management       sql.NullString
}

func (q *Queries) GetNationalPark(ctx context.Context, name sql.NullString) (GetNationalParkRow, error) {
	row := q.db.QueryRowContext(ctx, getNationalPark, name)
	var i GetNationalParkRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Region,
		&i.Images,
		&i.IntlStatuses,
		&i.TotalArea,
		&i.Coordinate,
		&i.WaterPercentages,
		&i.MapUrl,
		&i.Location,
		&i.EstablishedYear,
		&i.Visitors,
		&i.Management,
	)
	return i, err
}

const getNationalParks = `-- name: GetNationalParks :many
SELECT
  np.id AS id,
  np.name AS name,
  np.description AS description,
  np.region AS region,
  JSON_GROUP_ARRAY(
    JSON_OBJECT(
      'id',
      img.id,
      'link',
      img.link,
      'title',
      img.title,
      'date',
      img.date,
      'source',
      img.source,
      'author',
      img.author,
      'src',
      img.src
    )
  ) AS images,
  JSON_GROUP_ARRAY(
    JSON_OBJECT(
      'id',
      intl.id,
      'name',
      intl.name,
      'link',
      intl.link
    )
  ) as intl_statuses,
  JSON_OBJECT(
    'km',
    np.total_area_in_km,
    'miles',
    np.total_area_in_miles
  ) as total_area,
  JSON_OBJECT(
    'lat',
    np.coordinate_latitude,
    'long',
    np.coordinate_longitude
  ) as coordinate,
  np.water_percentages AS water_percentages,
  np.map_url AS map_url,
  np.location AS location,
  np.established AS established_year,
  np.visitors AS visitors,
  np.management AS management
FROM
  national_park np
  LEFT JOIN national_park_image npi ON np.id = npi.national_park_id
  LEFT JOIN image img ON npi.image_id = img.id
  LEFT JOIN image_license il ON img.id = il.image_id
  LEFT JOIN license lic ON il.license_id = lic.id
  LEFT JOIN national_park_intl_status nps ON np.id = nps.national_park_id
  LEFT JOIN intl_status intl ON nps.intl_status_id = intl.id
GROUP BY
  np.id
`

type GetNationalParksRow struct {
	ID               int64
	Name             sql.NullString
	Description      sql.NullString
	Region           sql.NullString
	Images           interface{}
	IntlStatuses     interface{}
	TotalArea        interface{}
	Coordinate       interface{}
	WaterPercentages sql.NullString
	MapUrl           sql.NullString
	Location         sql.NullString
	EstablishedYear  sql.NullInt64
	Visitors         sql.NullString
	Management       sql.NullString
}

func (q *Queries) GetNationalParks(ctx context.Context) ([]GetNationalParksRow, error) {
	rows, err := q.db.QueryContext(ctx, getNationalParks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNationalParksRow
	for rows.Next() {
		var i GetNationalParksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Region,
			&i.Images,
			&i.IntlStatuses,
			&i.TotalArea,
			&i.Coordinate,
			&i.WaterPercentages,
			&i.MapUrl,
			&i.Location,
			&i.EstablishedYear,
			&i.Visitors,
			&i.Management,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
